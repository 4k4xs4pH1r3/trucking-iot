package com.orendainx.hortonworks.trucking.nifi.processors

import java.io.OutputStream
import java.nio.charset.StandardCharsets

import com.orendainx.hortonworks.trucking.simulator.simulators.ManualTickAndFetchSimulator
import org.apache.nifi.annotation.behavior._
import org.apache.nifi.annotation.documentation.{CapabilityDescription, Tags}
import org.apache.nifi.annotation.lifecycle.{OnRemoved, OnShutdown}
import org.apache.nifi.components.PropertyDescriptor
import org.apache.nifi.logging.ComponentLog
import org.apache.nifi.processor._
import org.apache.nifi.processor.io.OutputStreamCallback

import scala.collection.JavaConverters._

/**
  * @author Edgar Orendain <edgar@orendainx.com>
  */
@Tags(Array("trucking", "data", "event", "generator", "simulator", "iot"))
@CapabilityDescription("Generates data for a trucking application. Master project <a href=\"https://github.com/orendain/trucking-iot\">found here</a>")
@InputRequirement(InputRequirement.Requirement.INPUT_FORBIDDEN)
@TriggerSerially
@WritesAttributes(Array(
  new WritesAttribute(attribute = "dataType", description = "The class name of the of the TruckingData this flowfile carries (e.g. \"TruckData\" or \"TrafficData\").")
))
class GetTruckingData extends AbstractProcessor {

  private var log: ComponentLog = _
  private lazy val simulator = ManualTickAndFetchSimulator()

  override def init(context: ProcessorInitializationContext): Unit = {
    log = context.getLogger
    simulator.tick() // On initialization, tick the simulator forward
  }

  override def onTrigger(context: ProcessContext, session: ProcessSession): Unit = {

    // Fetch results that have been generated by the simulator since last onTrigger
    val truckingData = simulator.fetch()
    log.debug(s"Received data: $truckingData")

    // Process each bit of data generated, creating flow file and tagging with attributes as appropriate
    truckingData.foreach { data =>
      log.debug(s"Processing data: $data")

      var flowFile = session.create()
      flowFile = session.putAttribute(flowFile, "dataType", data.getClass.getSimpleName)
      flowFile = session.write(flowFile, new OutputStreamCallback {
        override def process(outputStream: OutputStream) =
          outputStream.write(data.toCSV.getBytes(StandardCharsets.UTF_8))
      })

      // TODO: document what this does
      // TODO: session.getProvenanceReporter.receive(flowFile, "ThisDoesWhat?")
      session.getProvenanceReporter.route(flowFile, RelSuccess)
      session.transfer(flowFile, RelSuccess)
      session.commit()
    }

    // Tick the simulator forward so results are ready to be fetched by onTrigger's next invocation
    simulator.tick()
  }

  // Define properties and relationships
  override def getSupportedPropertyDescriptors: java.util.List[PropertyDescriptor] = List.empty[PropertyDescriptor].asJava

  override def getRelationships: java.util.Set[Relationship] = Set(
    new Relationship.Builder().name("success").description("All generated data is routed to this relationship.").build
  ).asJava

  @OnRemoved
  @OnShutdown
  def cleanup(): Unit = simulator.stop()
}
